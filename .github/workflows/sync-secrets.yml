name: Sync AWS Secrets to SealedSecrets

on:
  schedule:
    - cron: "0 */6 * * *" # Every 6 hours
  workflow_dispatch:
    inputs:
      force_update:
        description: "Force update even if secrets haven not changed"
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  pull-requests: write
  id-token: write

jobs:
  sync-secrets:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_SECRETS_SYNC_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-session-name: GitHubActions-SecretsSync

      - name: Install kubeseal
        run: |
          KUBESEAL_VERSION="0.26.0"
          curl -OL "https://github.com/bitnami-labs/sealed-secrets/releases/download/v${KUBESEAL_VERSION}/kubeseal-${KUBESEAL_VERSION}-linux-amd64.tar.gz"
          tar -xvzf kubeseal-${KUBESEAL_VERSION}-linux-amd64.tar.gz kubeseal
          sudo install -m 755 kubeseal /usr/local/bin/kubeseal
          kubeseal --version

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: "v1.28.0"

      - name: Configure kubectl for cluster access
        run: |
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME }}

      - name: Fetch secrets from AWS Secrets Manager
        id: fetch-secrets
        run: |
          SECRET_PREFIX="${{ secrets.SECRET_PREFIX }}"
          echo "Fetching secrets with prefix: $SECRET_PREFIX"

          # Fetch database secrets
          echo "Fetching database secrets..."
          DATABASE_SECRETS=$(aws secretsmanager get-secret-value --secret-id "${SECRET_PREFIX}/database" --query SecretString --output text)
          echo "database_secrets<<EOF" >> $GITHUB_OUTPUT
          echo "$DATABASE_SECRETS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          # Fetch storage secrets
          echo "Fetching storage secrets..."
          STORAGE_SECRETS=$(aws secretsmanager get-secret-value --secret-id "${SECRET_PREFIX}/storage" --query SecretString --output text)
          echo "storage_secrets<<EOF" >> $GITHUB_OUTPUT
          echo "$STORAGE_SECRETS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          # Fetch web secrets
          echo "Fetching web secrets..."
          WEB_SECRETS=$(aws secretsmanager get-secret-value --secret-id "${SECRET_PREFIX}/web" --query SecretString --output text)
          echo "web_secrets<<EOF" >> $GITHUB_OUTPUT
          echo "$WEB_SECRETS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          # Fetch AI Gateway secrets (optional)
          echo "Checking for AI Gateway secrets..."
          if aws secretsmanager describe-secret --secret-id "${SECRET_PREFIX}/ai-gateway" >/dev/null 2>&1; then
            echo "Fetching AI Gateway secrets..."
            AI_GATEWAY_SECRETS=$(aws secretsmanager get-secret-value --secret-id "${SECRET_PREFIX}/ai-gateway" --query SecretString --output text)
            echo "ai_gateway_secrets<<EOF" >> $GITHUB_OUTPUT
            echo "$AI_GATEWAY_SECRETS" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "AI Gateway secrets not found, skipping..."
          fi

          echo "All secrets fetched successfully"

      - name: Create temporary Kubernetes secrets
        run: |
          NAMESPACE="${{ secrets.NAMESPACE }}"

          # Create namespace if it doesn't exist
          kubectl create namespace "$NAMESPACE" --dry-run=client -o yaml | kubectl apply -f -

          # Parse secrets from JSON and create combined secret YAML
          cat > /tmp/create-secrets.py << 'EOF'
          import json
          import yaml
          import os
          import sys

          def create_secret_yaml(name, namespace, data_dict):
              secret = {
                  'apiVersion': 'v1',
                  'kind': 'Secret',
                  'metadata': {
                      'name': name,
                      'namespace': namespace
                  },
                  'type': 'Opaque',
                  'data': {}
              }
              
              # Convert all values to base64 (kubectl handles this automatically with --from-literal)
              # But for YAML generation, we'll use stringData instead
              secret['stringData'] = data_dict
              del secret['data']
              
              return secret

          # Parse database secrets
          database_secrets = json.loads(os.environ.get('DATABASE_SECRETS', '{}'))
          storage_secrets = json.loads(os.environ.get('STORAGE_SECRETS', '{}'))
          web_secrets = json.loads(os.environ.get('WEB_SECRETS', '{}'))
          ai_gateway_secrets = json.loads(os.environ.get('AI_GATEWAY_SECRETS', '{}'))

          namespace = os.environ.get('NAMESPACE')

          # Combine database and storage secrets into main secret
          combined_secrets = {**database_secrets, **storage_secrets}

          # Create main secret YAML
          main_secret = create_secret_yaml('helicone-secrets-temp', namespace, combined_secrets)
          with open('/tmp/helicone-secrets.yaml', 'w') as f:
              yaml.dump(main_secret, f, default_flow_style=False)

          # Create web secrets YAML
          web_secret = create_secret_yaml('helicone-web-secrets-temp', namespace, web_secrets)
          with open('/tmp/helicone-web-secrets.yaml', 'w') as f:
              yaml.dump(web_secret, f, default_flow_style=False)

          # Create AI Gateway secrets YAML if data exists
          if ai_gateway_secrets:
              ai_gateway_secret = create_secret_yaml('helicone-ai-gateway-secrets-temp', namespace, ai_gateway_secrets)
              with open('/tmp/helicone-ai-gateway-secrets.yaml', 'w') as f:
                  yaml.dump(ai_gateway_secret, f, default_flow_style=False)

          print("Secret YAML files created successfully")
          EOF

          # Set environment variables for the Python script
          export DATABASE_SECRETS='${{ steps.fetch-secrets.outputs.database_secrets }}'
          export STORAGE_SECRETS='${{ steps.fetch-secrets.outputs.storage_secrets }}'
          export WEB_SECRETS='${{ steps.fetch-secrets.outputs.web_secrets }}'
          export AI_GATEWAY_SECRETS='${{ steps.fetch-secrets.outputs.ai_gateway_secrets }}'
          export NAMESPACE="$NAMESPACE"

          # Run the Python script to create secret YAML files
          python3 /tmp/create-secrets.py

          # Verify the secret files were created
          echo "Created secret YAML files:"
          ls -la /tmp/helicone-*secrets*.yaml

      - name: Generate SealedSecrets
        run: |
          NAMESPACE="${{ secrets.NAMESPACE }}"

          # Generate main SealedSecret
          kubeseal --format=yaml --namespace="$NAMESPACE" --controller-namespace=kube-system --controller-name=sealed-secrets-controller < /tmp/helicone-secrets.yaml > /tmp/helicone-sealed-secrets.yaml

          # Generate web SealedSecret
          kubeseal --format=yaml --namespace="$NAMESPACE" --controller-namespace=kube-system --controller-name=sealed-secrets-controller < /tmp/helicone-web-secrets.yaml > /tmp/helicone-web-sealed-secrets.yaml

          # Generate AI Gateway SealedSecret if it exists
          if [ -f /tmp/helicone-ai-gateway-secrets.yaml ]; then
            kubeseal --format=yaml --namespace="$NAMESPACE" --controller-namespace=kube-system --controller-name=sealed-secrets-controller < /tmp/helicone-ai-gateway-secrets.yaml > /tmp/helicone-ai-gateway-sealed-secrets.yaml
          fi

          # Verify the sealed secrets were created
          echo "Generated SealedSecrets:"
          ls -la /tmp/*sealed-secrets*.yaml

      - name: Update SealedSecret templates
        run: |
          # Extract encrypted data from generated SealedSecrets and update templates
          python3 << 'EOF'
          import yaml
          import json
          import os

          def update_sealed_secret_template(sealed_secret_file, template_file, secret_name):
              if not os.path.exists(sealed_secret_file):
                  print(f"Skipping {sealed_secret_file} - file not found")
                  return False
                  
              # Load the generated SealedSecret
              with open(sealed_secret_file, 'r') as f:
                  sealed_secret = yaml.safe_load(f)
              
              # Read the template file
              with open(template_file, 'r') as f:
                  template_content = f.read()
              
              # Extract encrypted data
              encrypted_data = sealed_secret['spec']['encryptedData']
              
              # Update template with new encrypted values
              updated_content = template_content
              for key, encrypted_value in encrypted_data.items():
                  placeholder = f'"{key}": "PLACEHOLDER-ENCRYPT-YOUR-{key.upper().replace("-", "_")}"'
                  replacement = f'"{key}": "{encrypted_value}"'
                  if placeholder not in updated_content:
                      # Try alternative placeholder format
                      alt_placeholder = f'{key}: "PLACEHOLDER-ENCRYPT-YOUR-{key.upper().replace("-", "_")}"'
                      alt_replacement = f'{key}: "{encrypted_value}"'
                      updated_content = updated_content.replace(alt_placeholder, alt_replacement)
                  else:
                      updated_content = updated_content.replace(placeholder, replacement)
              
              # Write updated template
              with open(template_file, 'w') as f:
                  f.write(updated_content)
              
              print(f"Updated {template_file} with encrypted secrets")
              return True

          # Update main SealedSecret template
          update_sealed_secret_template(
              '/tmp/helicone-sealed-secrets.yaml',
              'charts/helicone-core/templates/sealed-secrets.yaml',
              'helicone-secrets'
          )

          # Note: This is a simplified update - in production you'd want more sophisticated
          # template updating that preserves the Helm template structure
          EOF

      - name: Check for changes
        id: git-check
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action - Secrets Sync"

          # Check if there are any changes
          if git diff --quiet; then
            echo "changes=false" >> $GITHUB_OUTPUT
            echo "No changes detected in SealedSecrets"
          else
            echo "changes=true" >> $GITHUB_OUTPUT
            echo "Changes detected in SealedSecrets"
            git diff --name-only
          fi

      - name: Create Pull Request
        if: steps.git-check.outputs.changes == 'true' || github.event.inputs.force_update == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: update SealedSecrets from AWS Secrets Manager"
          title: "🔐 Auto-sync: Update SealedSecrets from AWS Secrets Manager"
          body: |
            ## 🔐 Automated Secrets Sync

            This PR was automatically generated to sync secrets from AWS Secrets Manager to SealedSecrets.

            ### Changes
            - Updated encrypted secrets in `charts/helicone-core/templates/sealed-secrets.yaml`
            - Secrets are encrypted and safe to merge

            ### Verification
            - [ ] Review the changes
            - [ ] Ensure no plaintext secrets are exposed
            - [ ] Test deployment after merge

            **Auto-generated by:** `.github/workflows/sync-secrets.yml`
            **Triggered by:** ${{ github.event_name }}
            **AWS Region:** ${{ secrets.AWS_REGION }}
          branch: auto-sync/sealed-secrets
          delete-branch: true
          draft: false

      - name: Cleanup
        if: always()
        run: |
          # Remove temporary files containing secrets
          rm -f /tmp/helicone-*secrets*.yaml
          # Clear kubectl config
          rm -f ~/.kube/config
